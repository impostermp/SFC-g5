name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "issue#2" ]
  pull_request:
    branches: [ "main" ]
env: # Set the secret as an input
  docker_username: ${{ github.actor }}
  docker_password: ${{ secrets.GITHUB_TOKEN }}
  GIT_COMMIT: ${{ github.sha }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Clone-down:
    name: Clone down repo
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Upload Repo
      uses: actions/upload-artifact@v3
      with:
        name: code
        path: .

  Build:
    runs-on: ubuntu-latest
    needs: [Clone-down]
    steps:
    - name: Download code
      uses: actions/download-artifact@v3
      with:
        name: code
        path: . 
    - name: Build Frontend
      run: cd frontend && go build frontend
    - name: Build Backend
      run: cd backend && go build backend 
    - name: Upload Repo
      uses: actions/upload-artifact@v3
      with:
        name: code
        path: .

  Docker-image-frontend:
    runs-on: ubuntu-latest
    needs: [Build]
    permissions:
      packages: write
    steps:
    - name: Download code
      uses: actions/download-artifact@v3
      with:
        name: code
        path: .
    - name: build docker
      run: chmod +x frontend/build.sh && frontend/build.sh
    - name: push docker
      run: chmod +x frontend/push.sh && frontend/push.sh
  
  Docker-image-backend:
    runs-on: ubuntu-latest
    needs: [Build]
    permissions:
      packages: write
    steps:
    - name: Download code
      uses: actions/download-artifact@v3
      with:
        name: code
        path: .
    - name: build docker
      run: chmod +x backend/build.sh && backend/build.sh
    - name: push docker
      run: chmod +x backend/push.sh && backend/push.sh
      

    # Steps represent a sequence of tasks that will be executed as part of the job
  Tests:
    runs-on: ubuntu-latest
    needs: [Docker-image-backend, Docker-image-frontend]
    steps:
    - name: Download code
      uses: actions/download-artifact@v3
      with:
        name: code
        path: . 
    - name: Test frontend
      run: cd frontend && go test
      #ny test
  Kubernetes:
    runs-on: ubuntu-latest
    needs: [Docker-image-backend, Docker-image-frontend]
    steps:
    - name: Set up Kubectl
      uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBECONFIG }}
    - name: deploy kubernetes
      run:
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
    - name: deploy to cluster
      run: kubectl --kubeconfig kubeconfig apply -f kubernetes
      